import { Telegraf, session, Scenes } from 'telegraf';
import * as dotenv from 'dotenv';
import { UserRepository } from '../repositories/userRepository';
import { searchBrands, searchArticles } from '../abcp';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
interface SearchWizardState {
  number?: string;
  results?: SearchResultMap;
  selectedBrandNumber?: string;
  analogArticles?: any[]; // –î–æ–±–∞–≤–ª—è–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–æ–≥–æ–≤
  itemDetails?: Record<string, {
    title: string;
    price: number;
    distributorId: string;
    brand: string;
    supplierCode?: string;
    lastUpdateTime?: string;
    availability?: number;
    availabilityTransformed?: unknown;
  }>; // –î–µ—Ç–∞–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å WizardSession
interface MyWizardSession extends Scenes.WizardSessionData {
  state: SearchWizardState;
}

// –†–∞—Å—à–∏—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
interface MyContext extends Scenes.WizardContext<MyWizardSession> { }

// –°–æ–∑–¥–∞—ë–º —à–∞–≥–∏ –º–∞—Å—Ç–µ—Ä–∞
const step1 = async (ctx: MyContext) => {
  // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –∏–∑ –æ—Ç–º–µ–Ω—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ Info, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –≤–≤–æ–¥–∞
  const state = ctx.wizard.state as SearchWizardState;
  const resume = (ctx.scene.state || {}) as { resumeBrand?: string; resumeNumber?: string; resumeFromInfo?: boolean };

  // –í–æ–∑–≤—Ä–∞—Ç –∏–∑ —Å—Ü–µ–Ω—ã Info: –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
  if (resume.resumeFromInfo && (ctx as any).session && (ctx as any).session.searchState) {
    try {
      const saved = (ctx as any).session.searchState as Partial<SearchWizardState>;
      Object.assign(state, saved || {});
    } finally {
      try { delete (ctx as any).session.searchState; } catch {}
    }
    return ctx.wizard.selectStep(2);
  }
  if (resume.resumeNumber && resume.resumeBrand) {
    state.number = resume.resumeNumber;
    console.log('process.env.PROFILE_ID', process.env.PROFILE_ID);
      const resultSearchArticles = await searchArticles(
        resume.resumeNumber, resume.resumeBrand, process.env.PROFILE_ID || ''
      );

    const articles = (resultSearchArticles as any[]) || [];
    // console.log(resultSearchArticles);
    // console.log(`2 resultSearchArticles =====================`);
    if (articles.length === 0) {
      await ctx.reply('–ù–µ –Ω–∞–π–¥–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∑–∞–ø—á–∞—Å—Ç–∏:');
      return ctx.wizard.next();
    }

    const { analogArticles, nonAnalogArticles } = sortAndSplitArticles(articles);
    updateItemDetails(state, articles);
    state.analogArticles = analogArticles;
    await sendItems(ctx, nonAnalogArticles);
    await replyAnalogsButton(ctx, analogArticles.length);

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 3, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞–∂–∞—Ç–∏—è
    return ctx.wizard.selectStep(2);
  }

  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∑–∞–ø—á–∞—Å—Ç–∏:', {
    reply_markup: {
      keyboard: [[{ text: '–ò—Å—Ç–æ—Ä–∏—è' }, { text: '–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é' }], [{ text: '–ù–∞–∑–∞–¥' }]],
      resize_keyboard: true,
      one_time_keyboard: false,
    } as any,
  } as any);
  return ctx.wizard.next();
};

const step2 = async (ctx: MyContext) => {
  if (ctx.message && 'text' in ctx.message && ctx.message.text.startsWith('/')) {
    switch (ctx.message.text) {
      case '/start':
        await ctx.reply('–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞.');
        return ctx.scene.leave();
      case '/cancel':
        await ctx.reply('–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.');
        return ctx.scene.leave();
      default:
        await ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞.');
        return;
    }
  }

  if (ctx.message && 'text' in ctx.message) {
    // –ò—Å—Ç–æ—Ä–∏—è
    if (ctx.message.text === '–ò—Å—Ç–æ—Ä–∏—è') {
      const telegramId = ctx.from?.id ? String(ctx.from.id) : '';
      if (!telegramId) {
        await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å Telegram ID.');
        return;
      }
      const { SearchHistoryRepository } = await import('../repositories/searchHistoryRepository');
      const rows = await SearchHistoryRepository.last(telegramId, 10);
      if (!Array.isArray(rows) || rows.length === 0) {
        await ctx.reply('–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.');
        return;
      }
      const textOut = rows.map((x: any, i: number) => `${i + 1}. ${x.query}`).join('\n');
      await ctx.reply(textOut || '–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.');
      return; // –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —à–∞–≥–µ 2
    }

    // –ù–∞–∑–∞–¥
    if (ctx.message.text === '–ù–∞–∑–∞–¥') {
      const { getMainMenuUser } = await import('../menu');
      await ctx.reply('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.', await getMainMenuUser());
      return ctx.scene.leave();
    }

    // –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
    if (ctx.message.text === '–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é') {
      const telegramId = ctx.from?.id ? String(ctx.from.id) : '';
      if (!telegramId) {
        await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å Telegram ID.');
        return;
      }
      const { SearchHistoryRepository } = await import('../repositories/searchHistoryRepository');
      await SearchHistoryRepository.clear(telegramId);
      await ctx.reply('–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.');
      return; // –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —à–∞–≥–µ 2
    }
    const state = ctx.wizard.state as SearchWizardState;
    state.number = ctx.message.text;
    console.log(state.number);
    {
      const resultSearch = await searchBrands(state.number);
      state.results = resultSearch as SearchResultMap;
      // console.log('results saved', {
      //   query: state.number,
      //   count: Object.keys(state.results || {}).length,
      //   sample: Object.entries(state.results || {})[0]
      // });

      // console.log(state.results);
      // console.log(`state.results =====================`);

      const entries_ = Object.entries(state.results || {}) as [string, SearchResultItem][];
      console.log(entries_);
      const entries = entries_;
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
      try {
        const telegramId = ctx.from?.id ? String(ctx.from.id) : '';
        if (telegramId) {
          const { SearchHistoryRepository } = await import('../repositories/searchHistoryRepository');
        //   console.log(state.number, entries.length);
        //  console.log(`SearchHistoryRepository.add =====================`);
          await SearchHistoryRepository.add(telegramId, state.number || '', entries.length);
        }
      } catch {}
      
      if (entries.length > 0) {
        const buttons = entries.map(([key, item]) => [
          { text: `${item.brand} - ${item.description}`, callback_data: key }
        ]);

        buttons.push([
          { text: "üîç –î—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å", callback_data: "restart_search" }
        ]);

        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:', {
          reply_markup: {
            inline_keyboard: buttons
          }
        });
      } else {
        await ctx.reply('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        // –ù–∞ —Å–ª—É—á–∞–π –Ω—É–ª–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–¥—É–±–ª–∏—Ä—É—é—â–∞—è –∑–∞–ø–∏—Å—å –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è –≤—ã—à–µ)
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É
        return ctx.scene.reenter();
      }
    }
    return ctx.wizard.next();
  }

  await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.');
};

const step3 = async (ctx: MyContext) => {
  const state = ctx.wizard.state as SearchWizardState;

  // –†–∞–∑—Ä–µ—à–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–µ—à-–∫–æ–º–∞–Ω–¥—ã –¥–∞–∂–µ –Ω–∞ —à–∞–≥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  if (ctx.message && 'text' in ctx.message && ctx.message.text.startsWith('/')) {
    switch (ctx.message.text) {
      case '/start':
      case '/menu':
      case '/search':
      case '/help':
      case '/cancel':
        // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã –∏ –ø–æ–∑–≤–æ–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Ö—ç–Ω–¥–ª–µ—Ä–∞–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
        try { await ctx.scene.leave(); } catch {}
        return;
      default:
        await ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –∏–ª–∏ –∫–Ω–æ–ø–∫—É "–ù–æ–≤—ã–π –ø–æ–∏—Å–∫".');
        return;
    }
  }

  if (ctx.callbackQuery && 'data' in ctx.callbackQuery) {
    const data = (ctx.callbackQuery as any).data as string;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´–ù–æ–≤—ã–π –ø–æ–∏—Å–∫¬ª ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –Ω–∞ —à–∞–≥–µ –≤–≤–æ–¥–∞
    if (data === 'restart_search') {
      await ctx.answerCbQuery();
      const s = ctx.wizard.state as SearchWizardState;
      if (s) {
        delete s.number;
        delete s.results;
        delete s.selectedBrandNumber;
        delete s.analogArticles;
      }
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∑–∞–ø—á–∞—Å—Ç–∏:', {
        reply_markup: {
          keyboard: [[{ text: '–ò—Å—Ç–æ—Ä–∏—è' }, { text: '–ù–∞–∑–∞–¥' }]],
          resize_keyboard: true,
          one_time_keyboard: false,
        } as any,
      } as any);
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 2 (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏ –º–µ–Ω—é)
      ctx.wizard.selectStep(1);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–æ–≥–∏¬ª
    if (data === 'show_analogs') {
      await ctx.answerCbQuery();
      await showAnalogArticles(ctx);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´–ò–Ω—Ñ–æ¬ª
    if (data.startsWith('info:')) {
      await ctx.answerCbQuery();
      const [, brand, number] = data.split(':');
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ —Å–µ—Å—Å–∏—é, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–µ–∑ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
      try {
        const snapshot = JSON.parse(JSON.stringify(ctx.wizard.state));
        (ctx as any).session.searchState = snapshot;
      } catch {
        (ctx as any).session.searchState = (ctx.wizard.state as any);
      }
      await ctx.scene.enter('info' as any, { brand, number });
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´–ó–∞–∫–∞–∑–∞—Ç—å¬ª
    if (data.startsWith('order:')) {
      await ctx.answerCbQuery();
      const [, brand, number, availabilityRaw] = data.split(':');
      const availability = availabilityRaw ? Number(availabilityRaw) : undefined;
      const key2 = `${brand}:${number}`;
      const details = (state.itemDetails || {})[key2] || { title: '', price: 0 };
      await ctx.scene.enter('order' as any, {
        brand,
        number,
        availability,
        title: details.title,
        price: details.price,
        distributorId: (details as any).distributorId || '',
        supplierCode: (details as any).supplierCode || '',
        lastUpdateTime: (details as any).lastUpdateTime || '',
        availabilityTransformed: (details as any).availabilityTransformed,
      });
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞/–ø–æ–∑–∏—Ü–∏–∏ –∏–∑ step2
    const key = data;
    console.log('cb key', key);
    console.log('results present', !!state.results, 'count', Object.keys(state.results || {}).length);
    const selectedItem = state.results?.[key];

    if (!selectedItem?.number || !selectedItem?.brand) {
      await ctx.answerCbQuery('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞', { show_alert: true });
      await ctx.reply('–°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫?', {
        reply_markup: { inline_keyboard: [[{ text: '–ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'restart_search' }]] }
      });
      return;
    }
    console.log('process.env.PROFILE_ID', process.env.PROFILE_ID);
    const resultSearchArticles = await searchArticles(
      selectedItem.number, selectedItem.brand, process.env.PROFILE_ID || ''
    );
    // console.log(resultSearchArticles);
    // console.log(`resultSearchArticles >>>> =====================`);
    const articles = (resultSearchArticles as any[]) || [];
    if (articles.length === 0) {
      await ctx.reply('–ù–µ –Ω–∞–π–¥–µ–Ω–æ.');
      await ctx.reply('–°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫?', {
        reply_markup: { inline_keyboard: [[{ text: '–ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'restart_search' }]] }
      });
      await ctx.answerCbQuery();
      return;
    }

    const { analogArticles, nonAnalogArticles } = sortAndSplitArticles(articles);
    updateItemDetails(state, articles);
    state.analogArticles = analogArticles;
    await sendItems(ctx, nonAnalogArticles);
    await replyAnalogsButton(ctx, analogArticles.length);

    await ctx.answerCbQuery();
    return;
  }
  return;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–Ω–∞–ª–æ–≥–æ–≤
async function showAnalogArticles(ctx: MyContext) {
  const state = ctx.wizard.state as SearchWizardState;
  const analogArticles = state.analogArticles || [];

  if (analogArticles.length === 0) {
    await ctx.reply('–ê–Ω–∞–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    return;
  }

  await ctx.reply(`üî∏ *–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–∞–º–µ–Ω—ã (${analogArticles.length}):*`, {
    parse_mode: 'Markdown'
  });

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
  await sendItems(ctx, analogArticles);
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞
interface SearchResultItem {
  availability: number;
  brand: string;
  description: string;
  number: string;
  numberFix: string;
}

interface SearchResultMap {
  [key: string]: SearchResultItem;
}

// –°–æ–∑–¥–∞—ë–º –º–∞—Å—Ç–µ—Ä
const searchWizard = new Scenes.WizardScene<MyContext>(
  'search',
  step1,
  step2,
  step3
);

// –£—Ç–∏–ª–∏—Ç–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
function formatPrice(value: unknown): string {
  const num = Number(value);
  if (!Number.isFinite(num)) return '-';
  const sign = num < 0 ? '-' : '';
  const abs = Math.abs(num);
  const [intPart, fracPart] = abs.toFixed(2).split('.');
  const intWithSpaces = intPart.replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
  return `${sign}${intWithSpaces}.${fracPart}`;
}

export default searchWizard;

// –ü—É–±–ª–∏—á–Ω—ã–π —à–∞–±–ª–æ–Ω –ø–æ–∫–∞–∑–∞ –ø–æ–∑–∏—Ü–∏–∏ (—Å—Ç—Ä–æ–≥–æ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π)
function renderPublicItem(a: any): string {
  return `*–ë—Ä—ç–Ω–¥*: ${String(a.brand)}\n` +
    `*–ê—Ä—Ç–∏–∫—É–ª*: ${String(a.number)}\n` +
    `*–û–ø–∏—Å–∞–Ω–∏–µ*: ${String(a.description ?? '-')}\n` +
    `*–î–æ—Å—Ç—É–ø–Ω–æ*: ${String(a.availabilityTransformed ?? a.availability ?? '-')}\n` +
    // `*–°—Ä–æ–∫*: ${String(a.deliveryProbability === 0 ? '–ù–∞ —Å–∫–ª–∞–¥–µ' : a.descriptionOfDeliveryProbability)}\n` +
    `*–°—Ä–æ–∫*: ${String(a.deliveryPeriod === 0 ? '–ù–∞ —Å–∫–ª–∞–¥–µ' : `${a.deliveryPeriod} —á–∞—Å–∞`)}\n` +
    `*–¶–µ–Ω–∞*: ${formatPrice(a.price)}\n` +
    `*–í–µ—Å*: ${String(a.weight)}`;
}

// –•–µ–ª–ø–µ—Ä—ã –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
function sortAndSplitArticles(articles: any[]) {
  const sorted = [...articles];
  sorted.sort((a, b) => Number(Boolean(a.isAnalog)) - Number(Boolean(b.isAnalog)));
  const analogArticles = sorted.filter(a => a.isAnalog);
  const nonAnalogArticles = sorted.filter(a => !a.isAnalog);
  return { analogArticles, nonAnalogArticles };
}

function updateItemDetails(state: SearchWizardState, articles: any[]) {
  const detailsMap: Record<string, {
    title: string;
    price: number;
    distributorId: string;
    brand: string;
    supplierCode?: string;
    lastUpdateTime?: string;
    availability?: number;
    availabilityTransformed?: unknown;
  }> = (state.itemDetails ||= {} as any);
  for (const a of articles) {
    const key2 = `${String(a.brand)}:${String(a.number)}`;
    detailsMap[key2] = {
      title: String(a.description ?? '-'),
      price: Number(a.price ?? 0),
      distributorId: String((a as any).distributorId ?? ''),
      brand: String(a.brand ?? ''),
      supplierCode: String((a as any).supplierCode ?? ''),
      lastUpdateTime: String((a as any).lastUpdateTime ?? ''),
      availability: typeof a.availability === 'number' ? Number(a.availability) : undefined,
      availabilityTransformed: (a as any).availabilityTransformed,
    };
  }
}

function getOrderInlineKeyboard(a: any) {
  return {
    inline_keyboard: [[
      { text: '–ó–∞–∫–∞–∑–∞—Ç—å', callback_data: `order:${a.brand}:${a.number}:${a.availability ?? ''}` },
      // { text: '–ò–Ω—Ñ–æ', callback_data: `info:${a.brand}:${a.number}` },
      { text: '–ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'restart_search' }
    ]]
  } as any;
}

async function sendItems(ctx: MyContext, items: any[]) {
  for (const a of items) {
    await ctx.reply(renderPublicItem(a), {
      parse_mode: 'Markdown',
      reply_markup: getOrderInlineKeyboard(a)
    } as any);
  }
}

async function replyAnalogsButton(ctx: MyContext, analogCount: number) {
  if (analogCount <= 0) return;
  await ctx.reply(`–ù–∞–π–¥–µ–Ω—ã –∞–Ω–∞–ª–æ–≥–∏: ${analogCount}`, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [[
        { text: `üìã –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–æ–≥–∏`, callback_data: 'show_analogs' },
        { text: '–ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'restart_search' }
      ]]
    }
  } as any);
}

// availabilityTransformed —Ç–µ–ø–µ—Ä—å —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤ abcp.searchArticles