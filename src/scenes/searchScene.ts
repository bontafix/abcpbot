import { Telegraf, session, Scenes } from 'telegraf';
import * as dotenv from 'dotenv';
import { UserRepository } from '../repositories/userRepository';
import { searchBrands, searchArticles } from '../abcp';


const ABCP_HOST = process.env.ABCP_HOST;
const ABCP_USER = process.env.ABCP_USER;
const ABCP_PASS = process.env.ABCP_PASS;
// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
interface SearchWizardState {
  number?: string;
  results?: SearchResultMap;
  selectedBrandNumber?: string;
}


// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å WizardSession
interface MyWizardSession extends Scenes.WizardSessionData {
  state: SearchWizardState; // –£–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
}

// –†–∞—Å—à–∏—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
interface MyContext extends Scenes.WizardContext<MyWizardSession> { }

// –°–æ–∑–¥–∞—ë–º —à–∞–≥–∏ –º–∞—Å—Ç–µ—Ä–∞
const step1 = async (ctx: MyContext) => {
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∑–∞–ø—á–∞—Å—Ç–∏:');
  return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
  // return ctx.scene.leave();
};

const step2 = async (ctx: MyContext) => {
  // Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
  if (ctx.message && 'text' in ctx.message && ctx.message.text.startsWith('/')) {
    switch (ctx.message.text) {
      case '/start':
        await ctx.reply('–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞.');
        return ctx.scene.leave();
      case '/cancel':
        await ctx.reply('–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.');
        return ctx.scene.leave();
      default:
        await ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞.');
        return;
    }
  }

  if (ctx.message && 'text' in ctx.message) {
    const state = ctx.wizard.state as SearchWizardState;
    state.number = ctx.message.text;

    if (ABCP_HOST && ABCP_USER && ABCP_PASS) {
      const resultSearch = await searchBrands(ABCP_HOST, ABCP_USER, ABCP_PASS, state.number);
      state.results = resultSearch as SearchResultMap;

      const entries = Object.entries(state.results || {}) as [string, SearchResultItem][];
      if (entries.length > 0) {
        const buttons = entries.map(([key, item]) => [
          { text: `${item.brand} - ${item.description}`, callback_data: key }
        ]);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å" –≤ –∫–æ–Ω–µ—Ü
        buttons.push([
          { text: "üîç –î—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å", callback_data: "restart_search" }
        ]);

        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:', {
          reply_markup: {
            inline_keyboard: buttons
          }
        });
      } else {
        await ctx.reply('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        return ctx.scene.reenter();  // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
        // await ctx.scene.reenter(); // –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ step1
      }
    } else {
      await ctx.reply('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Abcp API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    return ctx.wizard.next();
  }

  await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.');
};

const step3 = async (ctx: MyContext) => {
  const state = ctx.wizard.state as SearchWizardState;

  if (ctx.callbackQuery && 'data' in ctx.callbackQuery) {
    const data = (ctx.callbackQuery as any).data as string;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´–ù–æ–≤—ã–π –ø–æ–∏—Å–∫¬ª
    if (data === 'restart_search') {
      await ctx.answerCbQuery();
      const s = ctx.wizard.state as SearchWizardState;
      if (s) {
        delete s.number;
        delete s.results;
        delete s.selectedBrandNumber;
      }
      await ctx.scene.reenter(); // –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ step1
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´–ó–∞–∫–∞–∑–∞—Ç—å¬ª
    if (data.startsWith('order:')) {
      await ctx.answerCbQuery();
      const [, brand, number, availabilityRaw] = data.split(':');
      const availability = availabilityRaw ? Number(availabilityRaw) : undefined;
      await ctx.scene.enter('order' as any, { brand, number, availability });
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞/–ø–æ–∑–∏—Ü–∏–∏ –∏–∑ step2
    const key = data;
    const selectedItem = state.results?.[key];

    if (!selectedItem?.number || !selectedItem?.brand || !ABCP_HOST || !ABCP_USER || !ABCP_PASS) {
      await ctx.answerCbQuery('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞', { show_alert: true });
      // –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
      await ctx.reply('–°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫?', {
        reply_markup: { inline_keyboard: [[{ text: '–ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'restart_search' }]] }
      });
      return;
    }

    const resultSearchArticles = await searchArticles(
      ABCP_HOST, ABCP_USER, ABCP_PASS,
      selectedItem.number, selectedItem.brand
    );

    const articles = (resultSearchArticles as any[]) || [];
    if (articles.length === 0) {
      await ctx.reply('2 –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      await ctx.reply('–°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫?', {
        reply_markup: { inline_keyboard: [[{ text: '–ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'restart_search' }]] }
      });
      await ctx.answerCbQuery();
      return;
    }
    console.log(articles);
    articles.sort((a, b) => Number(Boolean(a.isAnalog)) - Number(Boolean(b.isAnalog)));
    for (const a of articles) {
      const md = `*–ë—Ä—ç–Ω–¥*: ${String(a.brand)}\n` +
        `*–ê—Ä—Ç–∏–∫—É–ª*: ${String(a.number)} ${a.isAnalog ? " (üî∏–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞. )" : ""}\n` +
        `*–û–ø–∏—Å–∞–Ω–∏–µ*: ${String(a.description ?? '-')}\n` +
        `*–î–æ—Å—Ç—É–ø–Ω–æ*: ${String(a.availability ?? '-')}\n` +
        `*–°—Ä–æ–∫*: ${String(a.deliveryProbability === 0 ? '–ù–∞ —Å–∫–ª–∞–¥–µ' : a.descriptionOfDeliveryProbability)}\n` +
        `*–¶–µ–Ω–∞*: ${formatPrice(a.price)}\n `;
        `*–í–µ—Å*: ${formatPrice(a.weight)}\n `;
      //  `${a.isAnalog ? "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞!" : ""}`;

      await ctx.reply(md, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[
            { text: '–ó–∞–∫–∞–∑–∞—Ç—å', callback_data: `order:${a.brand}:${a.number}:${a.availability ?? ''}` },
            { text: '–ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'restart_search' }
          ]]
        }
      });
    }

    // –£–±–∏—Ä–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞, —Ç–∞–∫ –∫–∞–∫ –∫–Ω–æ–ø–∫–∞ –µ—Å—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
    await ctx.answerCbQuery();
    return; // –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ step3, –∂–¥—ë–º –Ω–∞–∂–∞—Ç–∏—è ¬´–ù–æ–≤—ã–π –ø–æ–∏—Å–∫¬ª –∏–ª–∏ ¬´–ó–∞–∫–∞–∑–∞—Ç—å¬ª
  }
  return; // –∂–¥—ë–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
};

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞
interface SearchResultItem {
  availability: number;
  brand: string;
  description: string;
  number: string;
  numberFix: string;
}

interface SearchResultMap {
  [key: string]: SearchResultItem;
}

// –°–æ–∑–¥–∞—ë–º –º–∞—Å—Ç–µ—Ä
const searchWizard = new Scenes.WizardScene<MyContext>(
  'search',
  step1,
  step2,
  step3
);

// –£—Ç–∏–ª–∏—Ç–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã: –ø—Ä–æ–±–µ–ª—ã –¥–ª—è —Ç—ã—Å—è—á –∏ 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏
function formatPrice(value: unknown): string {
  const num = Number(value);
  if (!Number.isFinite(num)) return '-';
  const sign = num < 0 ? '-' : '';
  const abs = Math.abs(num);
  const [intPart, fracPart] = abs.toFixed(2).split('.');
  const intWithSpaces = intPart.replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
  return `${sign}${intWithSpaces}.${fracPart}`;
}

export default searchWizard;  