import { Scenes, Markup } from 'telegraf';
import { OrderRepository, OrderRow } from '../repositories/orderRepository';
import { getMainMenuUser } from '../menu';
import { generatePdf } from '../invoice/service';
import { ClientRepository } from '../repositories/clientRepository';
import * as path from 'path';

const STATUS_LABELS: Record<string, string> = {
  new: '–ù–æ–≤—ã–π',
  in_progress: '–í —Ä–∞–±–æ—Ç–µ',
  rejected: '–û—Ç–∫–∞–∑',
  completed: '–í—ã–ø–æ–ª–Ω–µ–Ω',
  reserved: '–í —Ä–µ–∑–µ—Ä–≤–µ',
};

const STATUS_ORDER: Array<keyof typeof STATUS_LABELS> = [
  'new',
  'in_progress',
  'reserved',
  'completed',
  'rejected',
];

const ordersEnter = async (ctx: Scenes.WizardContext) => {
  const s = ctx.wizard.state as { orderMessageIds?: number[] };
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ id —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–∫–∞–∑–∞–º–∏
  s.orderMessageIds = [];
  const telegramId = ctx.from?.id ? String(ctx.from.id) : '';
  if (!telegramId) {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å Telegram ID.');
    return ctx.scene.leave();
  }

  const list = await OrderRepository.getByTelegramId(telegramId);
  if (!Array.isArray(list) || list.length === 0) {
    await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.');
    return ctx.scene.leave();
  }

  const state = (ctx.scene.state || {}) as { filterStatus?: string };
  const normalized = state.filterStatus ? String(state.filterStatus).toLowerCase() : '';
  const filtered = normalized ? (list as OrderRow[]).filter(o => String(o.status || '').toLowerCase() === normalized) : (list as OrderRow[]);

  if (filtered.length === 0 && normalized) {
    const label = STATUS_LABELS[normalized] || normalized;
    await ctx.reply(`–ó–∞–∫–∞–∑–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ ¬´${label}¬ª –Ω–µ—Ç.`);
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:', Markup.keyboard([
      ['–ù–æ–≤—ã–π', '–í —Ä–∞–±–æ—Ç–µ'],
      ['–í —Ä–µ–∑–µ—Ä–≤–µ', '–í—ã–ø–æ–ª–Ω–µ–Ω'],
      ['–û—Ç–∫–∞–∑'],
      ['–ù–∞–∑–∞–¥']
    ]).resize());
    return ctx.wizard.next();
  }

  for (const o of filtered as OrderRow[]) {
    const sum = (o.items || []).reduce((acc, it) => acc + Number(it.price || 0) * Number(it.count || 0), 0);
    const itemsText = (o.items || [])
      .map(it => `${it.number} ${it.title} ${Number(it.count)} ${Number(it.price).toFixed(2)} ${(Number(it.price) * Number(it.count)).toFixed(2)}`)
      .join('\n');
    const statusLabel = STATUS_LABELS[String(o.status || '').toLowerCase()] || (o.status ?? '-');
    const msg =
      `–ó–∞–∫–∞–∑ #${o.id} ‚Ä¢ ${new Date(o.datetime).toLocaleString()}\n` +
      `–°—Ç–∞—Ç—É—Å: ${statusLabel}\n` +
      (o.description ? `üí¨ ${o.description}\n` : '') +
      `${itemsText}\n` +
      `–ò—Ç–æ–≥–æ: ${sum.toFixed(2)}`;
    const actionButtons: Array<{ text: string; callback_data: string }> = [];
    // –†–∞–∑—Ä–µ—à–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ —Å—Ç–∞—Ç—É—Å–µ 'rejected'
    if (String(o.status || '').toLowerCase() === 'rejected') {
      actionButtons.push({ text: '–£–¥–∞–ª–∏—Ç—å', callback_data: `order_delete:${o.id}` });
    } else if (String(o.status || '').toLowerCase() !== 'completed') {
      // –î–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö ‚Äî –∫–Ω–æ–ø–∫–∞ –æ—Ç–∫–∞–∑–∞
      actionButtons.push({ text: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data: `order_cancel:${o.id}` });
    }
    // –ö–Ω–æ–ø–∫–∞ –≤—ã–ø–∏—Å–∫–∏ —Å—á—ë—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ª—é–±–æ–≥–æ –∑–∞–∫–∞–∑–∞
    actionButtons.push({ text: '–í—ã–ø–∏—Å–∞—Ç—å —Å—á—ë—Ç', callback_data: `order_invoice:${o.id}` });

    const sent = await ctx.reply(msg, {
      reply_markup: actionButtons.length
        ? { inline_keyboard: [actionButtons] }
        : undefined,
    });
    try {
      const mid = (sent as any)?.message_id;
      if (typeof mid === 'number') {
        s.orderMessageIds!.push(mid);
      }
    } catch {}
  }

  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:', Markup.keyboard([
    ['–ù–æ–≤—ã–π', '–í —Ä–∞–±–æ—Ç–µ'],
    ['–í —Ä–µ–∑–µ—Ä–≤–µ', '–í—ã–ø–æ–ª–Ω–µ–Ω'],
    ['–û—Ç–∫–∞–∑'],
    ['–ù–∞–∑–∞–¥']
  ]).resize());

  return ctx.wizard.next();
};

const ordersHandle = async (ctx: Scenes.WizardContext) => {
  if (ctx.message && 'text' in ctx.message) {
    const txt = (ctx.message.text || '').trim();
    if (txt === '–ù–∞–∑–∞–¥') {
      await ctx.reply('–°–∫—Ä—ã–≤–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É‚Ä¶', Markup.removeKeyboard());
      await ctx.reply('–ú–µ–Ω—é', await getMainMenuUser());
      return ctx.scene.leave();
    }
    const labelToKey: Record<string, string> = {
      '–ù–æ–≤—ã–π': 'new',
      '–í —Ä–∞–±–æ—Ç–µ': 'in_progress',
      '–û—Ç–∫–∞–∑': 'rejected',
      '–í—ã–ø–æ–ª–Ω–µ–Ω': 'completed',
      '–í —Ä–µ–∑–µ—Ä–≤–µ': 'reserved',
    };
    const mapped = labelToKey[txt] || '';
    if (mapped) {
      // –£–¥–∞–ª—è–µ–º —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–∫–∞–∑–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
      const s = ctx.wizard.state as { orderMessageIds?: number[] };
      const ids = Array.isArray(s.orderMessageIds) ? [...s.orderMessageIds] : [];
      for (const id of ids) {
        try { await ctx.deleteMessage(id); } catch {}
      }
      s.orderMessageIds = [];
      return ctx.scene.enter('orders', { filterStatus: mapped });
    }
    return; // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—á–µ–µ
  }

  if (ctx.callbackQuery && 'data' in ctx.callbackQuery) {
    const data = (ctx.callbackQuery as any).data as string;
    if (data.startsWith('order_delete:')) {
      await ctx.answerCbQuery();
      const orderId = Number(data.split(':')[1]);
      const telegramId = ctx.from?.id ? String(ctx.from.id) : '';
      const res = await OrderRepository.deleteById(orderId, telegramId);
      try { await ctx.deleteMessage(); } catch (e) { /* ignore */ }
      await ctx.reply(res.message, await getMainMenuUser());
      return ctx.scene.leave();
    }
    if (data.startsWith('order_cancel:')) {
      await ctx.answerCbQuery();
      const orderId = Number(data.split(':')[1]);
      const telegramId = ctx.from?.id ? String(ctx.from.id) : '';
      const res = await OrderRepository.updateStatusByTelegram(orderId, telegramId, 'rejected');
      try { await ctx.deleteMessage(); } catch (e) { /* ignore */ }
      await ctx.reply(res.message);
      return; // –æ—Å—Ç–∞—ë–º—Å—è –≤ —Å—Ü–µ–Ω–µ; –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–Ω–æ–≤–∞
    }
    if (data.startsWith('order_invoice:')) {
      await ctx.answerCbQuery('–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—á—ë—Ç‚Ä¶');
      const orderId = Number(data.split(':')[1]);
      const telegramId = ctx.from?.id ? String(ctx.from.id) : '';
      try {
        // –ò—â–µ–º –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const list = await OrderRepository.getByTelegramId(telegramId);
        if (!Array.isArray(list)) {
          await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤.');
          return;
        }
        const order = (list as OrderRow[]).find(o => Number(o.id) === orderId);
        if (!order) {
          await ctx.reply(`–ó–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const supplier = {
          title: process.env.SUPPLIER_TITLE || '',
          rs: process.env.SUPPLIER_RS || '',
          bik: process.env.SUPPLIER_BIK || '',
          ks: process.env.SUPPLIER_KS || '',
          inn: process.env.SUPPLIER_INN || '',
          ogrn: process.env.SUPPLIER_OGRN || '',
          kpp: process.env.SUPPLIER_KPP || '',
          bank: process.env.SUPPLIER_BANK || '',
        };
        if (!supplier.title || !supplier.rs || !supplier.bik || !supplier.ks || !supplier.inn) {
          await ctx.reply('–†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
          return;
        }

        const sum = (order.items || []).reduce((acc, it) => acc + Number(it.price || 0) * Number(it.count || 0), 0);
        const pad2 = (n: number) => (n < 10 ? `0${n}` : String(n));
        const now = new Date();
        const date = `${pad2(now.getDate())}.${pad2(now.getMonth() + 1)}.${now.getFullYear()}`;
        const invoiceNumber = `INV-${orderId}`;

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ customer
        const clientRow = await ClientRepository.get(telegramId);
        const clientInfo = Array.isArray(clientRow) && clientRow.length ? (clientRow as any)[0] : undefined;
        const customer = clientInfo ? {
          title: String(clientInfo.org_title || clientInfo.name || '').trim(),
          inn: String(clientInfo.org_inn || '').trim(),
          ogrn: String(clientInfo.org_ogrn || '').trim(),
          address: String(clientInfo.org_address || clientInfo.address || '').trim(),
          phone: String(order.phone || '').trim()
        } : { title: order.name, inn: '', address: '', phone: String(order.phone || '').trim() };

        // –ì–æ—Ç–æ–≤–∏–º –ø–æ–∑–∏—Ü–∏–∏ —Å—á—ë—Ç–∞ –∏–∑ –∑–∞–∫–∞–∑–∞
        const items = (order.items || []).map((it: any) => {
          const quantity = Number(it.count ?? it.quantity ?? 1);
          const price = Number(it.price ?? 0);
          return {
            name: String(` ${it.brand} ${it.number} ${it.title}`).trim(),
            unit: String(it.unit ?? '—à—Ç.'),
            tax: String(it.tax ?? '–±–µ–∑ –ù–î–°'),
            price,
            quantity,
            total: Number(price * quantity),
          };
        });

        const invoiceData: any = {
          supplier,
          customer,
          items,
          sum: Number(sum.toFixed(2)),
          sumStr: sum.toFixed(2),
          itemsCount: items.length,
          comment: `–û–ø–ª–∞—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É #${orderId}`,
          number: invoiceNumber,
          date,
        };

        const result = await generatePdf(invoiceData);
        if (result && result.url) {
          // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
          try {
            const baseDir = process.env.PATH_OUTPUT_STATIC || '';
            const filePath = path.isAbsolute(baseDir)
              ? path.join(baseDir, result.file)
              : path.join(process.cwd(), baseDir, result.file);
            await ctx.replyWithDocument({ source: filePath, filename: result.file });
          } catch {
            // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–∏–º —Å—Å—ã–ª–∫—É
            await ctx.reply(`–°—á—ë—Ç –≥–æ—Ç–æ–≤: ${result.url}`);
          }
        } else {
          await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
      } catch (e) {
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
      return;
    }
  }
};

const ordersScene = new Scenes.WizardScene<Scenes.WizardContext>(
  'orders',
  ordersEnter,
  ordersHandle
);

export default ordersScene;


