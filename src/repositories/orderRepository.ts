import { db } from '../db';
import { order } from '../models';
import { and, eq, gte, desc } from 'drizzle-orm';
import { canTransitionStatus, canDeleteByStatus, isKnownStatus, canTransitionStatusAdmin } from '../utils/orderStatusRules';
import { DatabaseError } from 'pg';
import { bot } from '../bot';

export interface OrderItem {
  number: string;
  title: string;
  count: number;
  price: number;
  brand?: string;
  distributorId?: string;
  supplierCode?: string;
  lastUpdateTime?: string;
  comment?: string;
}

export interface OrderRow {
  id: number;
  telegram_id: string;
  name: string;
  phone: string;
  description: string | null;
  delivery?: string | null;
  items: OrderItem[];
  status: string;
  status_datetime: Date;
  datetime: Date;
}

export const OrderRepository = {
  async create(telegramId: string, items: OrderItem[], delivery: string | undefined, name: string, phone: string, description?: string): Promise<{ success: boolean; message: string; id?: number; code?: string; detail?: string; }> {
    try {
      const result = await db.insert(order).values({ telegram_id: telegramId, items, description: description ?? null, delivery, name, phone }).returning({ id: order.id });
      const orderId = result[0]?.id;

      if (orderId) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
        await this.sendOrderNotification({
          id: orderId,
          telegramId,
          name,
          phone,
          items,
          description: description ?? null,
          deliveryMethod: delivery
        });
        return { success: true, message: '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω.', id: orderId };
      } else {
        console.warn('Insert returned no id for order. Payload snapshot:', {
          telegramId,
          name,
          phone,
          delivery,
          itemsCount: items?.length ?? 0,
        });
        return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å id –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏.' };
      }
    } catch (error) {
      if (error instanceof DatabaseError) {
        const e: any = error as any;
        const payload = {
          telegramId,
          name,
          phone,
          delivery,
          itemsCount: items?.length ?? 0,
          itemsPreview: (items || []).map(it => ({ number: it.number, count: it.count, price: it.price })),
        };
        console.error('PG error –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞', {
          code: e?.code,
          message: e?.message,
          detail: e?.detail,
          schema: e?.schema,
          table: e?.table,
          column: e?.column,
          constraint: e?.constraint,
          severity: e?.severity,
          where: e?.where,
          routine: e?.routine,
          payload,
          stack: e?.stack,
        });
        return { success: false, message: 'DB error', code: String(e?.code || ''), detail: String(e?.detail || '') };
      }
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ (–Ω–µ –ë–î):', { message: (error as any)?.message, stack: (error as any)?.stack });
      return { success: false, message: 'Unknown error' };
    }
  },

  async updateStatusByTelegram(orderId: number, telegramId: string, status: string) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª
      const rows = await db.select().from(order).where(and(eq(order.id, orderId), eq(order.telegram_id, telegramId)));
      if (!rows || rows.length === 0) {
        return { success: false, message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.' };
      }
      const current = String((rows[0] as any).status || '');
      const target = String(status || '');
      if (!isKnownStatus(target)) {
        return { success: false, message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å.' };
      }
      if (!canTransitionStatus(current, target)) {
        return { success: false, message: '–ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π.' };
      }

      const updated = await db
        .update(order)
        .set({ status: target, status_datetime: new Date() })
        .where(and(eq(order.id, orderId), eq(order.telegram_id, telegramId)))
        .returning({ id: order.id });

      if (!updated || updated.length === 0) {
        return { success: false, message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.' };
      }

      return { success: true, message: '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª—ë–Ω.' };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π telegramId):', error);
      return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.' };
    }
  },

  async list(params: { telegramId?: string; since?: Date; page?: number; pageSize?: number }): Promise<OrderRow[]> {
    const page = Math.max(1, Number(params.page || 1));
    const pageSize = Math.min(1000, Math.max(1, Number(params.pageSize || 100)));
    const offset = (page - 1) * pageSize;

    const filterConditions: any[] = [];
    if (params.telegramId) filterConditions.push(eq(order.telegram_id, params.telegramId));
    if (params.since) filterConditions.push(gte(order.datetime, params.since));

    const whereClause = filterConditions.length ? and(...filterConditions) : undefined;

    const rows = await db
      .select()
      .from(order)
      .where(whereClause as any)
      .orderBy(desc(order.id))
      .limit(pageSize)
      .offset(offset);

    return rows as unknown as OrderRow[];
  },

  async getByTelegramId(telegramId: string): Promise<OrderRow[] | { success: boolean; message: string }> {
    try {
      const rows = await db
        .select()
        .from(order)
        .where(eq(order.telegram_id, telegramId))
        .orderBy(desc(order.id));
      return rows as unknown as OrderRow[];
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', error?.message || '');
      return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã.' };
    }
  },

  async updateStatus(orderId: number, status: string) {
    try {
      // –ê–¥–º–∏–Ω—Å–∫–∏–π –∞–ø–¥–µ–π—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ telegramId, –Ω–æ —Å –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
      const rows = await db.select().from(order).where(eq(order.id, orderId));
      if (!rows || rows.length === 0) {
        return { success: false, message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.' };
      }
      const current = String((rows[0] as any).status || '');
      const target = String(status || '');
      if (!isKnownStatus(target)) {
        return { success: false, message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å.' };
      }
      if (!canTransitionStatusAdmin(current, target)) {
        return { success: false, message: '–ó–∞–ø—Ä–µ—â—ë–Ω –ø–µ—Ä–µ—Ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' };
      }
      await db
        .update(order)
        .set({ status: target, status_datetime: new Date() })
        .where(eq(order.id, orderId));
      return { success: true, message: '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª—ë–Ω.' };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', error);
      return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.' };
    }
  },

  async deleteById(orderId: number, telegramId: string) {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç—É—Å: —É–¥–∞–ª—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã –≤ —Å—Ç–∞—Ç—É—Å–µ 'rejected'
      const rows = await db.select().from(order).where(and(eq(order.id, orderId), eq(order.telegram_id, telegramId)));
      if (!rows || rows.length === 0) {
        return { success: false, message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.' };
      }
      const current = String((rows[0] as any).status || '');
      if (!canDeleteByStatus(current)) {
        return { success: false, message: '–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.' };
      }
      await db.delete(order).where(and(eq(order.id, orderId), eq(order.telegram_id, telegramId)));
      return { success: true, message: `–ó–∞–∫–∞–∑ #${orderId} —É–¥–∞–ª—ë–Ω.` };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
      return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑.' };
    }
  },

  async deleteAllByTelegramId(telegramId: string) {
    try {
      await db.delete(order).where(eq(order.telegram_id, telegramId));
      return { success: true, message: '–í—Å–µ –∑–∞–∫–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã.' };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return { success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑—ã.' };
    }
  },

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤ –≥—Ä—É–ø–ø—É
  async sendOrderNotification(orderData: {
    id: number;
    telegramId: string;
    name: string;
    phone: string;
    items: OrderItem[];
    description: string | null;
    deliveryMethod?: string;
  }) {
    try {
      const notifyChatId = process.env.REGISTRATION_NOTIFY_CHAT_ID || process.env.TEST_CHAT_ID;
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
      console.log('REGISTRATION_NOTIFY_CHAT_ID:', process.env.REGISTRATION_NOTIFY_CHAT_ID);
      console.log('TEST_CHAT_ID:', process.env.TEST_CHAT_ID);
      console.log('notifyChatId:', notifyChatId);

      if (!notifyChatId) {
        console.log('‚ùå REGISTRATION_NOTIFY_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        console.log('üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', Object.keys(process.env).filter(key =>
          key.includes('CHAT') || key.includes('TELEGRAM') || key.includes('BOT')
        ));
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç Chat ID
      const chatIdNum = parseInt(notifyChatId);
      if (isNaN(chatIdNum)) {
        console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Chat ID:', notifyChatId);
        return;
      }

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç:', notifyChatId);

      const userRef = `tg://user?id=${orderData.telegramId}`;
      const itemsText = orderData.items.map(item =>
        `‚Ä¢ ${item.brand || ''} ${item.number} - ${item.title} (${item.count} —à—Ç.)${item.comment ? `\n   üí¨ ${item.comment}` : ''}`
      ).join('\n');

      const totalPrice = orderData.items.reduce((sum, item) => sum + (item.price * item.count), 0);

      const message = `üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${orderData.id}

üë§ –ö–ª–∏–µ–Ω—Ç: ${orderData.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${orderData.phone}
üîó Telegram: ${userRef}
üì¶ ID: ${orderData.telegramId}

üìã –¢–æ–≤–∞—Ä—ã:
${itemsText}

üí∞ –°—É–º–º–∞: ${totalPrice.toLocaleString('ru-RU')} ‚ÇΩ
üöö –î–æ—Å—Ç–∞–≤–∫–∞: ${orderData.deliveryMethod || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`;

      console.log('üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', message.substring(0, 100) + '...');

      await bot.telegram.sendMessage(notifyChatId, message);
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #${orderData.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É ${notifyChatId}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ:', error);
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: error instanceof Error ? error.message : String(error),
        code: error instanceof Error ? (error as any).code : 'unknown',
        response: error instanceof Error ? (error as any).response?.body : undefined
      });
    }
  },

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  async testNotification(chatId?: string) {
    try {
      const testChatId = chatId || process.env.REGISTRATION_NOTIFY_CHAT_ID || process.env.TEST_CHAT_ID;
      if (!testChatId) {
        console.error('‚ùå –ù–µ—Ç Chat ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        return { success: false, message: 'Chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' };
      }

      console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç:', testChatId);

      const testMessage = `üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
Chat ID: ${testChatId}`;

      await bot.telegram.sendMessage(testChatId, testMessage);
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      return { success: true, message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      return { success: false, message: error instanceof Error ? error.message : String(error) };
    }
  },
};


