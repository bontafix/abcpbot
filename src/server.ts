import express from 'express';
import { bot } from './bot';
import * as dotenv from 'dotenv';
import { OrderRepository } from './repositories/orderRepository';
import { getDistributors } from './abcp';

dotenv.config();

const app = express();

// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const PORT = process.env.PORT || 8804;
const WEBHOOK_PATH = process.env.WEBHOOK_PATH || '/abcp-dev';
const WEBHOOK_URL = process.env.WEBHOOK_URL;

console.log('=== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ ===');
console.log('PORT:', PORT);
console.log('WEBHOOK_PATH:', WEBHOOK_PATH);
console.log('WEBHOOK_URL:', WEBHOOK_URL);
console.log('NODE_ENV:', process.env.NODE_ENV);
console.log('===========================');

if (!process.env.BOT_TOKEN || !WEBHOOK_URL) {
  throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å BOT_TOKEN –∏ WEBHOOK_URL –≤ .env');
}

// –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è webhook –±–µ–∑–æ–ø–∞—Å–Ω–æ (—É—á–∏—Ç—ã–≤–∞—è —Å–ª—ç—à–∏)
const fullWebhookUrl = new URL(WEBHOOK_PATH, WEBHOOK_URL).toString();
console.log('–ü–æ–ª–Ω—ã–π webhook URL:', fullWebhookUrl);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook (–æ–¥–∏–Ω —Ä–∞–∑)
bot.telegram.setWebhook(fullWebhookUrl, { drop_pending_updates: true })
  .then(() => {
    console.log('>> Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', fullWebhookUrl);
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ —É Telegram
    bot.telegram.getWebhookInfo()
      .then((info) => {
        console.log('WebhookInfo:', info);
      })
      .catch((err) => {
        console.error('–û—à–∏–±–∫–∞ getWebhookInfo:', err);
      });
    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—É—é /start –≤ —á–∞—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω TEST_CHAT_ID)
    const testChatId = process.env.TEST_CHAT_ID;
    if (testChatId) {
      bot.telegram.sendMessage(testChatId, '/start')
        .then(() => console.log('–¢–µ—Å—Ç–æ–≤–∞—è /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤', testChatId))
        .catch((err) => console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é /start:', err));
    }
  })
  .catch((err) => {
    console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', err);
  });

app.use(express.json());

// –ü—Ä–æ—Å—Ç–æ–π GET-–ø–∏–Ω–≥ —Ç–æ–≥–æ –∂–µ –ø—É—Ç–∏ ‚Äî –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–æ–∫—Å–∏
app.get(WEBHOOK_PATH, (req, res) => {
  res.status(200).send('webhook ok');
});

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º webhook callback –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏ (POST –æ—Ç Telegram)
app.post(WEBHOOK_PATH, bot.webhookCallback(WEBHOOK_PATH));

// –ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ API –ø–æ –∫–ª—é—á—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
function requireApiKey(req: express.Request, res: express.Response, next: express.NextFunction): void {
  const requiredKey = process.env.API_KEY;
  if (!requiredKey) { next(); return; }
  const provided = req.header('x-api-key') || '';
  if (provided !== requiredKey) { res.status(401).json({ error: 'unauthorized' }); return; }
  next();
}

// GET /api/orders?telegramId=&since=ISO&page=1&pageSize=100
app.get('/bot-api/orders', requireApiKey, async (req: express.Request, res: express.Response): Promise<void> => {
  try {
    const telegramId = (req.query.telegramId as string) || '';
    const sinceStr = (req.query.since as string) || '';
    const page = Math.max(1, Number(req.query.page || 1));
    const pageSize = Math.min(1000, Math.max(1, Number(req.query.pageSize || 100)));
    const sinceDate = sinceStr ? new Date(sinceStr) : undefined;
    const since = sinceDate && !isNaN(sinceDate.getTime()) ? sinceDate : undefined;
   
    const rows = await OrderRepository.list({
      telegramId: telegramId || undefined,
      since,
      page,
      pageSize,
    });

    // –ü–æ–ª—É—á–∏–º –¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ map –ø–æ id
    let distributorsMap: Record<string, any> = {};
    try {
      const distributors: any[] = await getDistributors();
      distributorsMap = Array.isArray(distributors)
        ? distributors.reduce((acc: Record<string, any>, d: any) => {
            const id = String(d?.id ?? d?.distributorId ?? '');
            if (id) {
              acc[id] = {
                id,
                name: d?.name,
                contractor: d?.contractor,
                updateTime: d?.updateTime,
              };
            }
            return acc;
          }, {})
        : {};
    } catch (e) {
      distributorsMap = {};
    }

    res.json({ page, pageSize, count: rows.length, orders: rows, distributorsMap });
    return;
  } catch (e: any) {
    console.error('GET /api/orders error:', e?.message || e);
    res.status(500).json({ error: 'internal_error' });
    return;
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    port: PORT, 
    webhookPath: WEBHOOK_PATH, 
    environment: process.env.NODE_ENV 
  });
});

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì° Webhook –ø—É—Ç—å: ${WEBHOOK_PATH}`);
  console.log(`üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${process.env.NODE_ENV || 'development'}`);
});
