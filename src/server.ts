import express from 'express';
import { bot } from './bot';
import * as dotenv from 'dotenv';
import { db } from './db';
import { order } from './models';
import { and, eq, gte } from 'drizzle-orm';

dotenv.config();

const app = express();

// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const PORT = process.env.PORT || 8804;
const WEBHOOK_PATH = process.env.WEBHOOK_PATH || '/abcp-dev';
const WEBHOOK_URL = process.env.WEBHOOK_URL;

console.log('=== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ ===');
console.log('PORT:', PORT);
console.log('WEBHOOK_PATH:', WEBHOOK_PATH);
console.log('WEBHOOK_URL:', WEBHOOK_URL);
console.log('NODE_ENV:', process.env.NODE_ENV);
console.log('===========================');

if (!process.env.BOT_TOKEN || !WEBHOOK_URL) {
  throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å BOT_TOKEN –∏ WEBHOOK_URL –≤ .env');
}

// –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è webhook
const fullWebhookUrl = WEBHOOK_URL + WEBHOOK_PATH;
console.log('–ü–æ–ª–Ω—ã–π webhook URL:', fullWebhookUrl);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook (–æ–¥–∏–Ω —Ä–∞–∑)
bot.telegram.setWebhook(fullWebhookUrl)
  .then(() => {
    console.log('>> Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', fullWebhookUrl);
  })
  .catch((err) => {
    console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', err);
  });

app.use(express.json());

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º webhook callback –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
app.use(WEBHOOK_PATH, bot.webhookCallback(WEBHOOK_PATH));

// –ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ API –ø–æ –∫–ª—é—á—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
function requireApiKey(req: express.Request, res: express.Response, next: express.NextFunction): void {
  const requiredKey = process.env.API_KEY;
  if (!requiredKey) { next(); return; }
  const provided = req.header('x-api-key') || '';
  if (provided !== requiredKey) { res.status(401).json({ error: 'unauthorized' }); return; }
  next();
}

// GET /api/orders?telegramId=&since=ISO&page=1&pageSize=100
app.get('/bot-api/orders', requireApiKey, async (req: express.Request, res: express.Response): Promise<void> => {
  try {
    const telegramId = (req.query.telegramId as string) || '';
    const sinceStr = (req.query.since as string) || '';
    const page = Math.max(1, Number(req.query.page || 1));
    const pageSize = Math.min(1000, Math.max(1, Number(req.query.pageSize || 100)));
    const offset = (page - 1) * pageSize;

    const conditions: any[] = [];
    if (telegramId) conditions.push(eq(order.telegram_id, telegramId));
    if (sinceStr) {
      const sinceDate = new Date(sinceStr);
      if (!isNaN(sinceDate.getTime())) conditions.push(gte(order.datetime, sinceDate));
    }

    const whereClause = conditions.length ? and(...conditions) : undefined;
    const rows = await db
      .select()
      .from(order)
      .where(whereClause as any)
      .limit(pageSize)
      .offset(offset);

    res.json({ page, pageSize, count: rows.length, orders: rows });
    return;
  } catch (e: any) {
    console.error('GET /api/orders error:', e?.message || e);
    res.status(500).json({ error: 'internal_error' });
    return;
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    port: PORT, 
    webhookPath: WEBHOOK_PATH, 
    environment: process.env.NODE_ENV 
  });
});

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì° Webhook –ø—É—Ç—å: ${WEBHOOK_PATH}`);
  console.log(`üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${process.env.NODE_ENV || 'development'}`);
});
